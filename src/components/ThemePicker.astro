---
import { Icon } from "astro-icon/components";
---

<form action="">
    <fieldset class="theme-picker">
        <label class="visually-hidden" for="blue">Blue</label>
        <input type="radio" name="theme" id="blue" checked />
        <legend class="visually-hidden">pick a theme</legend>
        <label class="visually-hidden" for="pink">Pink</label>
        <input type="radio" name="theme" id="pink" />
        <label class="visually-hidden" for="green">Green</label>
        <input type="radio" name="theme" id="green" />
    </fieldset>
    <fieldset class="mode-picker">
        <legend class="visually-hidden">pick a color mode</legend>
        <label class="visually-hidden" for="light-mode">Follow system</label>
        <label aria-hidden="true" for="system"
            ><Icon name="settings" size="1.2rem" /></label
        >
        <input
            class="visually-hidden"
            type="radio"
            name="mode"
            id="system"
            checked
        />
        <label class="visually-hidden" for="light-mode">Light mode</label>
        <label aria-hidden="true" for="light-mode"
            ><Icon name="lightmode" size="1.2rem" /></label
        >
        <input
            class="visually-hidden"
            type="radio"
            name="mode"
            id="light-mode"
        />
        <label class="visually-hidden" for="dark-mode">Dark mode</label>
        <label aria-hidden="true" for="dark-mode"
            ><Icon name="darkmode" size="1.2rem" /></label
        >
        <input
            class="visually-hidden"
            type="radio"
            name="mode"
            id="dark-mode"
        />
    </fieldset>
</form>

<script is:inline>
    const colorThemes = document.querySelectorAll('[name="theme"]');
    const colorModes = document.querySelectorAll('[name="mode"]');

    // store theme
    const storeLocally = function (key, value) {
        localStorage.setItem(key, value);
    };

    // set theme when visitor returns
    const setTheme = function () {
        const activeTheme = localStorage.getItem("theme");
        colorThemes.forEach((theme) => {
            if (theme.id === activeTheme) {
                theme.checked = true;
            }
        });
    };

    // set theme when visitor returns
    const setMode = function () {
        const activeMode = localStorage.getItem("mode");
        colorModes.forEach((mode) => {
            if (mode.id === activeMode) {
                mode.checked = true;
            }
        });
    };

    colorThemes.forEach((theme) => {
        theme.addEventListener("click", () => {
            storeLocally("theme", theme.id);
        });
    });

    colorModes.forEach((mode) => {
        mode.addEventListener("click", () => {
            storeLocally("mode", mode.id);
        });
    });

    document.onload = setTheme();
    document.onload = setMode();
</script>

<style>
    form {
        padding-block-end: 2rem;
        justify-self: start;
        display: grid;
        gap: 1.2rem;
    }

    fieldset {
        border: 0;
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 2rem;
    }

    input[type="radio"] {
        appearance: none;
    }

    .theme-picker {
        padding-inline-start: 6px;
        padding-block-start: 6px;
    }

    .theme-picker input[type="radio"] {
        width: 0.5rem;
        height: 0.5em;
        outline: 2px solid var(--radio-color, currentColor);
        outline-offset: 3px;
        border-radius: 50%;
    }

    .theme-picker input[type="radio"]:checked {
        background-color: var(--radio-color);
    }

    .theme-picker input[type="radio"]#pink {
        --radio-color: var(--primary-pink);
    }
    .theme-picker input[type="radio"]#blue {
        --radio-color: var(--primary-blue);
    }
    .theme-picker input[type="radio"]#green {
        --radio-color: var(--primary-green);
    }

    .mode-picker label {
        width: 0.5rem;
        height: 0.5em;
    }

    [data-icon] {
        color: var(--on-surface-container);
    }

    .mode-picker label:has(+ input[type="radio"]:checked) [data-icon] {
        color: var(--primary);
    }
</style>
